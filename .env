# # Environment Configuration File (.env)
# # Used for local development.
# # DO NOT COMMIT THIS FILE TO VERSION CONTROL. ADD IT TO .gitignore.

# # --- Node Environment ---
# # Set to 'development', 'production', or 'test'
# # Controls logging levels, error details, etc.
# NODE_ENV=development

# # --- Server Configuration ---
# # The port the application server will listen on.
# PORT=5000

# # --- Database Configuration ---
# # PostgreSQL connection string URL format:
# # postgresql://USER:PASSWORD@HOST:PORT/DATABASE_NAME?schema=public
# # Ensure USER, PASSWORD, and DATABASE_NAME match your docker-compose.yml or actual DB setup.
# # HOST should be the database service name ('db' in the example docker-compose.yml) for Docker networking.
# # !! IMPORTANT: Replace 'securepassword' with a strong, unique password for production !!
# # DB_HOST=db # Docker service name
# DB_HOST=dpg-cvkg5qggjchc73cbruq0-a.ohio-postgres.render.com # Docker service name
# DB_PORT=5432
# DB_USER=invepro_user # Example user from docker-compose
# DB_PASSWORD=OJRGGXSGSi5AA4PEUoRggCysfSNOIe4L # Example password from docker-compose - CHANGE THIS
# DB_NAME=invepro # Example db name from docker-compose
# DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public"

# # --- Redis Configuration ---
# # Redis connection string URL format:
# # redis://HOST:PORT
# # HOST should be the Redis service name ('cache' in the example docker-compose.yml).
# # No password is set in the example docker-compose.yml Redis service. Add password if needed: redis://:PASSWORD@HOST:PORT
# REDIS_HOST=cache # Docker service name
# REDIS_PORT=6379
# REDIS_URL="redis://${REDIS_HOST}:${REDIS_PORT}"

# # --- Security Configuration ---
# # JWT (JSON Web Token) secret key for signing tokens.
# # !! IMPORTANT: MUST be a strong, random string, AT LEAST 32 characters long. REPLACE THIS !!
# JWT_SECRET="replace_this_with_a_very_strong_random_32_plus_char_secret_key"

# # JWT token expiration time (e.g., '1d', '2h', '30m'). Shorter times are generally more secure.
# JWT_EXPIRES_IN="1d"

# # Optional: JWT Refresh Token configuration (if implementing refresh tokens)
# # JWT_REFRESH_SECRET="replace_this_with_another_strong_random_secret_key"
# # JWT_REFRESH_EXPIRES_IN="7d"

# # --- CORS Configuration ---
# # Allowed origins for Cross-Origin Resource Sharing.
# # For local development, '*' can be used, but it's insecure.
# # !! IMPORTANT: For production, list specific frontend URLs separated by commas (e.g., "https://app.yourdomain.com,https://admin.yourdomain.com") !!
# CORS_ORIGIN="*"

# # --- Logging Configuration ---
# # Log level severity (error, warn, info, http, verbose, debug, silly).
# # 'debug' is useful for development, 'info' or 'warn' for production.
# LOG_LEVEL="debug"

# # --- Optional: Third-Party API Keys ---
# # Add API keys or other sensitive configurations needed by your application here.
# # EXAMPLE_API_KEY=
# # STRIPE_SECRET_KEY=
# # SENDGRID_API_KEY=



# Environment Configuration File (.env)
# Used for local development.
# DO NOT COMMIT THIS FILE TO VERSION CONTROL. ADD IT TO .gitignore.

# --- Node Environment ---
NODE_ENV=development

# --- Server Configuration ---
PORT=5000

# --- Database Configuration ---
# !! Values used directly in DATABASE_URL below !!
DB_HOST=dpg-cvkg5qggjchc73cbruq0-a.ohio-postgres.render.com
DB_PORT=5432
DB_USER=invepro_user
DB_PASSWORD=OJRGGXSGSi5AA4PEUoRggCysfSNOIe4L # Ensure no special chars needing URL encoding
DB_NAME=invepro

# ---- FIX: Construct the URL with actual values ---
#DATABASE_URL="postgresql://invepro_user:OJRGGXSGSi5AA4PEUoRggCysfSNOIe4L@dpg-cvkg5qggjchc73cbruq0-a.ohio-postgres.render.com:5432/invepro?schema=public"
DATABASE_URL="postgresql://postgres:z7zx5xm6@dbprovider.ap-southeast-1.clawcloudrun.com:30068/?directConnection=true"
# --- Redis Configuration ---
# !! Values used directly in REDIS_URL below !!
# Note: You're connecting to a Render DB but a local Docker Redis ('cache').
# This is unusual for development unless intended. If Render provides Redis, use its URL.
# If you *want* to use the Docker Redis for local dev, this is correct IF Docker is running.
# REDIS_HOST=cache # Docker service name (only works if running docker-compose up)
REDIS_HOST=redis-robertishimwe0-5cb2.j.aivencloud.com
REDIS_PORT=26940

# --- FIX: Construct the URL with actual values ---
REDIS_URL=rediss://default:AVNS_gtZ0HRE92Zsj1In3W3H@redis-robertishimwe0-5cb2.j.aivencloud.com:26940

# --- Security Configuration ---
JWT_SECRET="replace_this_with_a_very_strong_random_32_plus_char_secret_key"
JWT_EXPIRES_IN=30000

# --- CORS Configuration ---
CORS_ORIGIN="*"

# --- Logging Configuration ---
LOG_LEVEL="debug"

# --- Optional: Third-Party API Keys ---
# EXAMPLE_API_KEY=
# STRIPE_SECRET_KEY=
# SENDGRID_API_KEY=

# --- Security Configuration ---

# Refresh Token configuration
JWT_REFRESH_SECRET="replace_this_with_a_DIFFERENT_strong_random_secret_key_for_refresh"
JWT_REFRESH_EXPIRES_IN_DAYS=7 # Expiry in days for refresh token cookie/storage

# Password Reset Token configuration
PASSWORD_RESET_SECRET="replace_this_with_another_DIFFERENT_strong_random_secret_for_reset"
PASSWORD_RESET_EXPIRES_IN=30000 # How long the reset token is valid

# Cookie Configuration
REFRESH_TOKEN_COOKIE_NAME="refreshToken"

# Rate Limiter Configuration (optional, defaults in code)
# RATE_LIMIT_WINDOW_MINUTES=15
# RATE_LIMIT_MAX_REQUESTS=100

# Frontend URL (needed for password reset email link)
FRONTEND_URL="http://localhost:3000" # Replace with your actual frontend URL
EMAIL_FROM_ADDRESS= rob@rob.rw

# Email Service Configuration (Example for SendGrid - adapt as needed)
# SENDGRID_API_KEY=YOUR_SENDGRID_API_KEY
# EMAIL_FROM_ADDRESS="no-reply@yourapp.com"